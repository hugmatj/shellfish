/*******************************************************************************
This file is part of the Shellfish UI toolkit.
Copyright (c) 2022 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

require "shellfish/ui";

/**
 * Element representing a file item for displaying in a list view.
 *
 * @memberof ui
 * @name FSItem
 * @class
 * @extends html.MouseBox
 *
 * @property {string} displayMode - (default: `"list"`) The display mode. One of `list|grid`
 * @property {object} file - (default: `null`) The file object to represent.
 * @property {html.Filesystem} filesystem - (default: null) If the filesystem is set, it is used for icon thumbnails.
 * @property {bool} highlighted - (default: `false`) If `true`, the item is highlighted.
 * @property {string} thumbnail - (default: `""`) The path of the thumbnail on the filesystem.
 */
MouseBox {
    id: item

    property displayMode: "list"
    property highlighted: false
    property file: null
    property filesystem: null
    property thumbnail: ""

    color: containsMouse && ! highlighted ? theme.hoverBackgroundColor
                                          : highlighted ? theme.highlightBackgroundColor
                                                        : "transparent"

    layout: item.displayMode === "list" ? "center-row" : "center-column"

    onFileChanged: () =>
    {
        sizeLabel.text = "...";

        if (filesystem && file)
        {
            const forPath = file.path;

            const condition = () =>
            {
                return lifeCycleStatus !== "destroyed" &&
                       file.path === forPath;
            };

            if (file.type === "d")
            {
                /*
                wait(300)
                .then(safeCallback(() =>
                {
                    filesystem.list(file.path)
                    .then(safeCallback(items =>
                    {
                        sizeLabel.text = items.length + " items";
                    }, condition))
                    .catch(() => { });
                }, condition));
                */
            }
            else
            {
                let size = Math.ceil(item.file.size / 1024);
                const units = ["KB", "MB", "GB", "TB"];

                for (let i = 0; i < units.length; ++i)
                {
                    const unit = units[i];
                    if (size < 1024)
                    {
                        sizeLabel.text = (i === 0 ? size : size.toFixed(1)) + " " + unit;
                        break;
                    }
                    size /= 1024;
                }
            }
        }
    }

    onThumbnailChanged: () =>
    {
        thumbnailIcon.source = "";

        if (filesystem && thumbnail !== "")
        {
            const forThumbnail = thumbnail;

            const condition = () =>
            {
                return lifeCycleStatus !== "destroyed" &&
                       thumbnail === forThumbnail;
            };

            wait(300)
            .then(safeCallback(() =>
            {
                filesystem.exists(thumbnail)
                .then(safeCallback(ok =>
                {
                    if (ok)
                    {
                        filesystem.read(thumbnail)
                        .then(safeCallback(blob =>
                        {
                            thumbnailIcon.source = blobUrl(blob);
                        }, condition))
                        .catch(() => { });
                    }
                }, condition))
                .catch(() => { });
            }, condition));
        }
    }

    // icon
    Box {
        id: iconBox

        width: bboxHeight
        fillWidth: displayMode === "list" ? false : true
        fillHeight: true
        marginTop: displayMode === "list" ? 0 : theme.paddingSmall
        marginLeft: displayMode === "list" ? 0 : theme.paddingSmall
        marginRight: displayMode === "list" ? 0 : theme.paddingSmall
        marginBottom: displayMode === "list" ? 0 : theme.paddingSmall +
                                                    nameLabel.bboxHeight +
                                                    sizeLabel.bboxHeight

        //borderRadius: 3
        //borderColor: theme.borderColor
        //borderWidth: thumbnailIcon.visible ? 1 : 0

        layout: "center"

        Image {
            id: thumbnailIcon

            visible: status === "success"
            fillWidth: true
            fillHeight: true
            fitMode: "cover"
        }

        Box {
            visible: item.file.type === "d" || ! thumbnailIcon.visible

            position: "free"
            origin: "bottom-right"
            fillWidth: ! thumbnailIcon.visible
            fillHeight: ! thumbnailIcon.visible
            width: thumbnailIcon.visible ? parent.bboxWidth * 0.3 : -1
            height: thumbnailIcon.visible ? width : -1

            color: item.containsMouse || item.highlighted ? item.color : theme.contentBackgroundColor

            layout: "center"

            FSIcon {
                id: icon

                fontSize: parent.bboxHeight * 0.8
                horizontalAlignment: "center"
                color: item.highlighted ? theme.highlightColor : theme.primaryColor
                mimeType: item.file.mimetype
            }
        }

    }

    Label {
        id: nameLabel

        position: item.displayMode === "list" ? "inline" : "free"
        origin: item.displayMode === "list" ? "top-left" : "bottom-left"
        fillWidth: true
        marginLeft: theme.paddingSmall
        marginRight: theme.paddingSmall
        marginBottom: item.displayMode === "list" ? 0 : sizeLabel.bboxHeight
        horizontalAlignment: item.displayMode === "list" ? "left" : "center"
        overflowBehavior: "ellipsis"
        literal: true
        color: parent.highlighted || parent.containsMouse ? theme.highlightColor : theme.primaryColor
        text: item.file.name
    }

    Label {
        id: sizeLabel

        position: item.displayMode === "list" ? "inline" : "free"
        origin: item.displayMode === "list" ? "top-left" : "bottom-left"
        fillWidth: item.displayMode === "grid"
        marginLeft: theme.paddingSmall
        marginRight: theme.paddingSmall
        horizontalAlignment: item.displayMode === "list" ? "left" : "center"
        fontSize: item.displayMode === "list" ? theme.fontSizeMedium : theme.fontSizeSmall
        color: parent.highlighted || parent.containsMouse ? theme.highlightColor : theme.secondaryColor
    }

    Tooltip {
        visible: parent.hovered && nameLabel.contentWidth > Math.round(nameLabel.bboxWidth)
        text: nameLabel.text
    }
}