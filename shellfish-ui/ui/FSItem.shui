/*******************************************************************************
This file is part of the Shellfish UI toolkit.
Copyright (c) 2022 - 2023 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

require "shellfish/low" as low;
require "shellfish/ui";

/**
 * Element representing a file item for displaying in a list view.
 *
 * @memberof ui
 * @name FSItem
 * @class
 * @extends html.MouseBox
 *
 * @property {number[]} columnWidths - (default: `[]`) An optional array for setting the widths of the columns in `list` mode.
 * @property {string} displayMode - (default: `"list"`) The display mode. One of `list|grid`
 * @property {object} file - (default: `null`) The file object to represent.
 * @property {bool} highlighted - (default: `false`) If `true`, the item is highlighted.
 * @property {string} thumbnail - (default: `""`) The URL of the thumbnail. This is usually a local blob URL.
 */
MouseBox {
    id: item

    property displayMode: "list"
    property highlighted: false
    property file: null
    property columnWidths: []
    property thumbnail: ""

    color: containsMouse && ! highlighted ? theme.hoverBackgroundColor
                                          : highlighted ? theme.highlightBackgroundColor
                                                        : "transparent"

    layout: item.displayMode === "list" ? "row" : "column"

    onFileChanged: () =>
    {
        sizeLabel.text = "";

        if (file)
        {
            if (file.type === "d")
            {
                nameLabel.text = low.escapeMarkup(item.file.name);
                typeLabel.text = "Folder";
            }
            else
            {
                const parts = item.file.name.split(".");
                let ext = "";
                if (parts.length > 1)
                {
                    ext = parts.pop();
                }
                nameLabel.text = low.escapeMarkup(parts.join("."));

                let size = Math.ceil(item.file.size / 1024);
                const units = ["KB", "MB", "GB", "TB"];

                for (let i = 0; i < units.length; ++i)
                {
                    const unit = units[i];
                    if (size < 1024)
                    {
                        sizeLabel.text = (i === 0 ? size : size.toFixed(1)) + " " + unit;
                        break;
                    }
                    size /= 1024;
                }

                typeLabel.text = ext !== "" ? ext : file.mimetype;
            }
        }
    }

    // icon
    Box {
        id: iconBox

        fillWidth: displayMode === "list" ? false : true
        fillHeight: displayMode === "list" ? true : false
        width: displayMode === "list" ? bboxHeight : -1
        height: displayMode === "list" ? -1 : bboxWidth

        Image {
            id: thumbnailIcon

            visible: status === "success"
            fillWidth: true
            fillHeight: true
            marginTop: 2
            marginLeft: 2
            marginRight: 2
            marginBottom: 2
            fitMode: "contain"

            source: item.thumbnail
        }

        Box {
            position: "free"
            origin: "bottom-right"
            marginTop: 2
            marginLeft: 2
            marginRight: 2
            marginBottom: 2
            fillWidth: ! thumbnailIcon.visible
            fillHeight: ! thumbnailIcon.visible
            width: thumbnailIcon.visible ? parent.bboxWidth * 0.3 : -1
            height: thumbnailIcon.visible ? width : -1
            color: thumbnailIcon.visible ? theme.secondaryBackgroundColor : "transparent"

            layout: "center"

            FSIcon {
                id: icon

                fontSize: parent.bboxHeight * 0.8
                horizontalAlignment: "center"
                color: item.highlighted ? theme.highlightColor : theme.primaryColor
                mimeType: item.file.mimetype
            }
        }
    }

    Box {
        width: item.displayMode === "list" ? (item.columnWidths[0] - iconBox.bboxWidth) || -1
                                           : -1
        fillWidth: width === -1
        fillHeight: item.displayMode === "list"
        layout: "center"

        Label {
            id: nameLabel

            property lines: Math.round(contentHeight / (fontSize * 1.2))
            property lineHeight: lines > 0 ? contentHeight / lines : 0;

            fillWidth: true
            marginLeft: theme.paddingSmall
            marginRight: theme.paddingSmall
            horizontalAlignment: item.displayMode === "list" ? "left" : "center"
            overflowBehavior: "break" //"ellipsis"
            maxHeight: lineHeight * 3
            color: item.highlighted || item.containsMouse ? theme.highlightColor : theme.primaryColor
         }
    }

    Box {
        visible: nameLabel.lines > 3 && item.displayMode !== "list"
        fillWidth: true
        marginLeft: theme.paddingSmall
        marginRight: theme.paddingSmall
        height: 1
        color: sizeLabel.color
    }

    Box {
        width: item.displayMode === "list" ? item.columnWidths[1] || -1
                                           : -1
        fillWidth: width === -1
        fillHeight: item.displayMode === "list"
        layout: "center"

        Label {
            id: typeLabel

            fillWidth: true
            marginLeft: theme.paddingSmall
            marginRight: theme.paddingSmall
            horizontalAlignment: item.displayMode === "list" ? "left" : "center"
            fontSize: item.displayMode === "list" ? theme.fontSizeMedium : theme.fontSizeSmall
            color: item.highlighted || item.containsMouse ? theme.highlightColor : theme.secondaryColor
        }
    }

    Box {
        width: item.displayMode === "list" ? item.columnWidths[2] || -1
                                           : -1
        fillWidth: width === -1
        fillHeight: item.displayMode === "list"
        layout: "center"

        Label {
            id: sizeLabel

            fillWidth: true
            marginLeft: theme.paddingSmall
            marginRight: theme.paddingSmall
            horizontalAlignment: item.displayMode === "list" ? "right" : "center"
            fontSize: item.displayMode === "list" ? theme.fontSizeMedium : theme.fontSizeSmall
            color: item.highlighted || item.containsMouse ? theme.highlightColor : theme.secondaryColor
         }
    }
    

    Tooltip {
        visible: item.hovered &&
                 (nameLabel.contentWidth > Math.round(nameLabel.bboxWidth) ||
                  nameLabel.contentHeight > Math.round(nameLabel.bboxHeight))
        text: nameLabel.text
    }
}