/*******************************************************************************
This file is part of the Shellfish UI toolkit.
Copyright (c) 2020 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

require "shellfish/ui";

ListView {
    id: fsview

    property iconScale: 1

    property displayMode: 0
    property currentIndex: -1

    cellWidth: fsview.displayMode === 0 ? fsview.bbox.width - 1 : theme.itemWidthLarge * iconScale
    cellHeight: fsview.displayMode === 0 ? theme.itemHeightMedium : cellWidth

    delegate: template MouseBox {
        id: fileItem

        width: fsview.cellWidth
        height: fsview.cellHeight

        color: modelData.index === fsview.currentIndex ? theme.highlightBackgroundColor
                                                       : "transparent"

        layout: fsview.displayMode === 0 ? "center-row" : "center-column"

        onClick: () =>
        {
            fsview.currentIndex = modelData.index;
            console.log("current index: " + fsview.currentIndex);
        }

        onDoubleClick: () =>
        {
            if (modelData.value.type === "d")
            {
                fsview.model.path = modelData.value.path;
            }
        }

        Box {
            width: bbox.height
            fillWidth: displayMode === 0 ? false : true
            fillHeight: true
            marginTop: displayMode === 0 ? 0 : theme.paddingSmall
            marginLeft: displayMode === 0 ? 0 : theme.paddingSmall
            marginRight: displayMode === 0 ? 0 : theme.paddingSmall
            marginBottom: displayMode === 0 ? 0 : theme.paddingSmall +
                                                  nameLabel.bbox.height +
                                                  sizeLabel.bbox.height
            layout: "center"

            Image {
                id: thumbnail

                visible: status === "success"
                fillWidth: true
                fillHeight: true
                fitMode: displayMode === 0 ? "cover" : "contain"

                onInitialization: () =>
                {
                    if (fileItem.modelData.value.path.toLowerCase().endsWith(".jpg") ||
                        fileItem.modelData.value.path.toLowerCase().endsWith(".png"))
                    {
                        fsview.model.fs.read(fileItem.modelData.value.path, safeCallback((ok, blob) =>
                        {
                            if (ok)
                            {
                                const url = URL.createObjectURL(blob);
                                source = url;
                            }
                        }));
                    }
                }

                onStatusChanged: {
                    if (status === "success" || status === "error")
                    {
                        URL.revokeObjectURL(source);
                    }
                }
            }

            FSIcon {
                id: icon

                visible: ! thumbnail.visible
                fillWidth: true
                fontSize: parent.bbox.height * 0.6
                horizontalAlignment: "center"
                mimeType: fileItem.modelData.value.mimetype
            }
        }

        Label {
            id: nameLabel

            position: fsview.displayMode === 0 ? "inline" : "free"
            origin: fsview.displayMode === 0 ? "top-left" : "bottom-left"
            fillWidth: true
            marginLeft: theme.paddingSmall
            marginRight: theme.paddingSmall
            marginBottom: fsview.displayMode === 0 ? 0 : sizeLabel.bbox.height
            horizontalAlignment: fsview.displayMode === 0 ? "left" : "center"
            overflowBehavior: "ellipsis"
            text: fileItem.modelData.value.name
        }

        Label {
            id: sizeLabel

            position: fsview.displayMode === 0 ? "inline" : "free"
            origin: fsview.displayMode === 0 ? "top-left" : "bottom-left"
            fillWidth: fsview.displayMode === 1
            marginLeft: theme.paddingSmall
            marginRight: theme.paddingSmall
            horizontalAlignment: fsview.displayMode === 0 ? "left" : "center"
            fontSize: fsview.displayMode === 0 ? theme.fontSizeMedium : theme.fontSizeSmall
            color: theme.secondaryColor
            text: Math.ceil(fileItem.modelData.value.size / 1024) + " KB"
        }

    }

    onCurrentIndexChanged: () =>
    {
        positionViewAt(currentIndex);   
    }
}