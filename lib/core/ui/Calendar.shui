/*******************************************************************************
This file is part of the Shellfish UI toolkit.
Copyright (c) 2021 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

require "shellfish/ui";

MouseBox {
    id: cal

    property date: (() =>
                   {
                       const d = new Date();
                       return [d.getFullYear(), d.getMonth(), d.getDate()];
                   })()

    property dayDelegate: template Button {
        labelProfile: Object { property horizontalAlignment: "right" }
        fillWidth: true
        fillHeight: true
        visible: parent.day !== 0
        checked: parent.isToday
        flat: true
        text: parent.day !== 0 ? "" + parent.day : ""

        onClick: (ev) =>
        {
            cal.dateSelected(parent.year, parent.month, parent.day);
            ev.accepted = true;
        }
    }

    event dateSelected

    width: theme.itemWidthMedium * 7
    height: theme.itemHeightSmall * 7

    onInitialization: () =>
    {
        daysModel.setMonth(date[0], date[1]);
    }

    onPointerDown: (ev) =>
    {
        ev.accepted = true;
    }

    onDateChanged: () => { daysModel.setMonth(date[0], date[1]); }

    Object {
        id: priv

        property mode: 0

        function isToday(year, month, day)
        {
            const now = new Date();
            return now.getFullYear() === year &&
                now.getMonth() === month &&
                now.getDate() === day;
        }
    }

    Object {
        id: daysModel

        property offset: 0
        property days: 31

        function setMonth(year, month)
        {
            const date = new Date(year, month);

            let weekDay = 0;
            while (weekDay < date.getDay())
            {
                ++weekDay;
            }
            offset = weekDay;

            let count = 0;
            while (date.getMonth() === month)
            {
                date.setDate(date.getDate() + 1);
                ++count;
            }
            days = count;
        }
    }

    Box {
        enabled: priv.mode === 0

        fillWidth: true
        height: theme.itemHeightSmall
        color: theme.secondaryBackgroundColor
        layout: "row"

        Button {
            labelProfile: Object { property bold: true }
            flat: true
            text: ["January", "February", "March", "April",
                   "May", "June", "July", "August",
                   "September", "October", "November", "December"][cal.date[1]]

            onClick: (ev) =>
            {
                priv.mode = 1;
                ev.accepted = true;
            }
        }

        Button {
            labelProfile: Object { property bold: true }
            flat: true
            text: "" + cal.date[0]

            onClick: (ev) =>
            {
                priv.mode = 2;
                ev.accepted = true;
            }
        }

        Box { fillWidth: true }

        Button {
            icon: "core-calendar"
            flat: true
            onClick: (ev) =>
            {
                const d = new Date();
                cal.date = [d.getFullYear(), d.getMonth(), d.getDate()];
                ev.accepted = true;
            }
        }

        Button {
            icon: "core-arrow_up"
            flat: true
            onClick: (ev) =>
            {
                let y = cal.date[0];
                let m = cal.date[1];
                let d = cal.date[2];
                if (m === 0)
                {
                    --y;
                    m= 11;
                }
                else
                {
                    --m;
                }
                cal.date = [y, m, d];
                ev.accepted = true;
            }
        }

        Button {
            icon: "core-arrow_down"
            flat: true
            onClick: (ev) =>
            {
                let y = cal.date[0];
                let m = cal.date[1];
                let d = cal.date[2];
                if (m === 11)
                {
                    ++y;
                    m = 0;
                }
                else
                {
                    ++m;
                }
                cal.date = [y, m, d];
                ev.accepted = true;
            }
        }
    }

    Box {
        fillWidth: true
        height: theme.itemHeightSmall
        layout: "row"

        Repeater {
            model: ListModel { data: sequence(0, 7) }
            delegate: template Box {
                width: parent.bbox.width / 7
                fillHeight: true
                layout: "center"

                Label {
                    fontSize: theme.fontSizeSmall
                    color: theme.secondaryColor
                    text: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][parent.modelData.index]
                }
            }
        }
    }

    Box {
        id: box

        fillWidth: true
        fillHeight: true

        // day picker
        Box {
            id: daysBox

            visible: priv.mode === 0

            fillWidth: true
            fillHeight: true
            overflowBehavior: "wrap"
            layout: "row"

            Repeater {
                model: ListModel { data: sequence(0, 6 * 7) }

                delegate: template Loader {
                    property year: cal.date[0]
                    property month: cal.date[1]
                    property day: modelData.index >= daysModel.offset &&
                                  modelData.index < daysModel.offset + daysModel.days ? 1 + modelData.index - daysModel.offset
                                                                                      : 0
                    property dayOfWeek: (daysModel.offset + day - 1) % 7
                    property isToday: priv.isToday(cal.date[0], cal.date[1], day)

                    width: Math.floor(box.bbox.width / 7)
                    height: box.bbox.height / 6

                    sourceTemplate: cal.dayDelegate
                }
            }
        }

        // month picker
        ListView {
            visible: priv.mode === 1

            fillWidth: true
            fillHeight: true

            model: ListModel {
                data: ["Jan", "Feb", "Mar",
                    "Apr", "May", "Jun",
                    "Jul", "Aug", "Sep",
                    "Oct", "Nov", "Dec"]
            }
            cellWidth: Math.floor(box.bbox.width / 3)
            cellHeight: box.bbox.height / 4

            delegate: template Button {
                flat: true
                checked: modelData.index === cal.date[1]
                text: modelData.value

                onClick: (ev) =>
                {
                    cal.date = [cal.date[0], modelData.index, cal.date[2]];
                    priv.mode = 0;
                    ev.accepted = true;
                }
            }
        }

        // year picker
        ListView {
            visible: priv.mode === 2

            fillWidth: true
            fillHeight: true

            model: ListModel {
                data: sequence(1900, 200)
            }

            cellWidth: Math.floor(box.bbox.width / 4)
            cellHeight: box.bbox.height / 6

            delegate: template Button {
                flat: true
                checked: modelData.value === cal.date[0]
                text: "" + modelData.value

                onClick: (ev) =>
                {
                    cal.date = [modelData.value, cal.date[1], cal.date[2]];
                    priv.mode = 0;
                    ev.accepted = true;
                }
            }

            onVisibleChanged: () =>
            {
                if (visible)
                {
                    positionViewAt(cal.date[0] - 1900);
                }
            }
        }
    }
}