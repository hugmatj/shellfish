/*******************************************************************************
This file is part of the Shellfish UI toolkit.
Copyright (c) 2020 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

MouseBox {
    id: page

    container default: contentArea
    container header: headerArea

    property scrollable: true
    property pageStack: null
    property currentPage: false
    property contentTemplate: null
    property loading: false
    property frozen: false
    property _frozen: false
    property _parentPage: null
    property _sliding: false

    property show: (immediate) =>
    {
        if (contentTemplate)
        {
            loading = true;
        }

        if (immediate)
        {
            marginLeft = 0;
            frozen = false;
        }
        else
        {
            frozen = true;
            _sliding = true;
            pushAnimation.from = marginLeft;
            pushAnimation.to = 0;
            pushAnimation.start();
        }
    }

    property close: (callback) =>
    {
        frozen = true;
        _sliding = true;
        popAnimation.from = marginLeft;
        popAnimation.to = documentRoot.windowWidth;
        popAnimation.onFinished = callback;
        popAnimation.start();
    }

    property loadContent: () =>
    {
        const item = contentTemplate.create(__rslv__);
        loading = false;
        contentArea.add(item);
    }

    position: _frozen ? "global" : "inline"
    
    width: documentRoot.windowWidth
    height: _frozen ? documentRoot.windowHeight : -1
    minHeight: documentRoot.windowHeight

    marginLeft: documentRoot.windowWidth
    fillWidth: ! _frozen
    color: theme.primaryBackgroundColor

    enabled: ! _frozen

    trapFocus: true

    style: marginLeft > 0 ? ["sh-no-scrollbars", "sh-dropshadow"]
                          : ["sh-no-scrollbars"]

    onFrozenChanged: () =>
    {
        if (frozen)
        {
            const scrollTop = documentRoot.contentY;
            documentRoot.contentY = 0;
            contentArea.minHeight = contentArea.contentHeight;
            _frozen = true;
            page.contentY = scrollTop;
        }
        else
        {
            const scrollTop = page.contentY;
            page.contentY = 0;
            contentArea.minHeight = 0;
            contentArea.contentY = 0;
            _frozen = false;
            documentRoot.contentY = scrollTop;

            if (page.contentTemplate && page.loading)
            {
                loadContentTimer.start();
            }
        }
    }
    
    /*
    onDrag: (ev) =>
    {
        if (! currentPage)
        {
            return;
        }

        if (! frozen &&
            (pageStack.pages.length === 1 || contentArea.contentX > 0))
        {
            return;
        }

        ev.accepted = true;

        if (! frozen && (ev.deltaX < 16 || Math.abs(ev.deltaY) > Math.abs(ev.deltaX)))
        {
            return;
        }

        if (Math.abs(ev.deltaX) > Math.abs(ev.deltaY))
        {
            if (! frozen)
            {
                frozen = true;
            }
            marginLeft = Math.max(0, marginLeft + ev.deltaX);
        }
    }

    onDragEnd: (ev) =>
    {
        if (! currentPage)
        {
            return;
        }

        if (frozen)
        {
            if (marginLeft > width / 3)
            {
                pageStack.popPage();
            }
            else
            {
                pushAnimation.from = marginLeft;
                pushAnimation.to = 0;
                pushAnimation.start();
            }
        }
    }
    */

    // background
    Box {
        visible: page.frozen && page.marginLeft > 0
        position: "global"
        width: page.marginLeft
        fillHeight: true
        color: "black"
        opacity: 0.8 - (width / documentRoot.windowWidth) * 0.8
    }

    // back arrow indicator
    Box {
        visible: ! _sliding && page.marginLeft > page.width / 3

        position: "global"
        x: theme.paddingMedium
        y: documentRoot.windowHeight / 2 - height / 2
        width: height
        height: theme.itemHeightLarge * 2
        borderRadius: theme.borderRadius
        color: theme.primaryColor
        layout: "center"

        Label {
            fontSize: parent.height / 2
            color: theme.primaryBackgroundColor
            text: "[icon:navigate_before]"
        }
    }

    Box {
        id: contentArea

        width: documentRoot.windowWidth
        height: page.scrollable ? -1 : documentRoot.windowHeight
    }

    Box {
        id: headerArea
    }

    Timer {
        id: loadContentTimer
        interval: 0
        repeat: false

        onTimeout: () =>
        {
            page.loadContent();
        }
    }

    NumberAnimation {
        id: pushAnimation

        duration: 700

        onNext: (v) =>
        {
            page.marginLeft = v;
        }

        onFinished: () =>
        {
            page.frozen = false;
            page._sliding = false;
        }
    }

    NumberAnimation {
        id: popAnimation

        duration: 700

        onNext: (v) =>
        {
            page.marginLeft = v;
        }

        onFinished: () =>
        {
            page._sliding = false;
        }
    }
}
