/*******************************************************************************
This file is part of the Shellfish UI toolkit.
Copyright (c) 2020 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

require "shellfish/mid";

MouseBox {
    id: page

    container default: contentArea

    property pageStack: null
    property currentPage: false
    property frozen: false
    property _frozen: false
    property _parentPage: null
    property _sliding: false

    property show: {
        frozen = true;
        _sliding = true;
        pushAnimation.from = marginLeft;
        pushAnimation.to = 0;
        pushAnimation.start();
    }

    property close: {
        const callback = arguments[0];

        frozen = true;
        _sliding = true;
        popAnimation.from = marginLeft;
        popAnimation.to = documentRoot.windowWidth;
        popAnimation.onFinished = callback;
        popAnimation.start();
    }

    position: _frozen ? "global" : "inline"
    
    width: documentRoot.windowWidth
    height: _frozen ? documentRoot.windowHeight : -1
    minHeight: documentRoot.windowHeight

    marginLeft: documentRoot.windowWidth
    fillWidth: ! _frozen
    color: theme.primaryBackgroundColor

    style: marginLeft > 0 ? ["sh-no-scrollbars", "sh-dropshadow"] : "sh-no-scrollbars"

    onFrozenChanged: {
        if (frozen)
        {
            const scrollTop = documentRoot.contentY;
            documentRoot.contentY = 0;
            contentArea.minHeight = contentArea.contentHeight;
            _frozen = true;
            page.contentY = scrollTop;
        }
        else
        {
            const scrollTop = page.contentY;
            page.contentY = 0;
            contentArea.minHeight = 0;
            contentArea.contentY = 0;
            _frozen = false;
            documentRoot.contentY = scrollTop;
        }
    }

    onDrag: {
        if (! currentPage)
        {
            return;
        }

        if (! touched)
        {
            //return;
        }

        const ev = arguments[0];

        if (! frozen)
        {
            if (pageStack.pages.length === 1 || contentArea.contentX > 0 || ev.dx < 16)
            {
                return;
            }
        }

        if (Math.abs(ev.dx) > Math.abs(ev.dy))
        {
            if (! frozen)
            {
                frozen = true;
            }
            marginLeft = Math.max(0, marginLeft + ev.dx);
            direct ev.accepted = true;
        }
    }

    onDragEnd: {
        if (! currentPage)
        {
            return;
        }

        if (frozen)
        {
            if (marginLeft > width / 3)
            {
                pageStack.popPage();
            }
            else
            {
                pushAnimation.from = marginLeft;
                pushAnimation.to = 0;
                pushAnimation.start();
            }
        }
    }

    Box {
        visible: ! _sliding && page.marginLeft > page.width / 3

        position: "global"
        x: theme.paddingMedium
        y: documentRoot.windowHeight / 2 - height / 2
        width: height
        height: theme.itemHeightLarge
        color: theme.primaryColor
        layout: "center"

        Label {
            fontSize: theme.fontSizeNormal
            color: theme.primaryBackgroundColor
            text: "[icon:arrow-left]"
        }
    }

    Box {
        id: contentArea

        enabled: ! page._frozen
        width: documentRoot.windowWidth
    }

    NumberAnimation {
        id: pushAnimation

        duration: 700

        onNext: {
            const v = arguments[0];
            page.marginLeft = v;
        }

        onFinished: {
            page.frozen = false;
            page._sliding = false;
        }
    }

    NumberAnimation {
        id: popAnimation

        duration: 700

        onNext: {
            const v = arguments[0];
            page.marginLeft = v;
        }

        onFinished: {
            page._sliding = false;
        }
    }
}
