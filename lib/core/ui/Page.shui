/*******************************************************************************
This file is part of the Shellfish UI toolkit.
Copyright (c) 2020 - 2021 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

MouseBox {
    id: page

    container default: contentArea
    container header: headerArea

    property thisPage: self
    property shortcutReceiver: self

    property scrollable: true
    property pageStack: null
    property currentPage: false
    property contentTemplate: null
    property loading: false
    property frozen: openingPercentage < 1 || ! currentPage
    property openingPercentage: 0

    property show: (immediate) =>
    {
        if (contentTemplate)
        {
            loading = true;
        }

        openingPercentage = 1;
    }

    property close: (callback) =>
    {
        priv.closeCallback = callback;
        openingPercentage = 0;
    }

    property loadContent: () =>
    {
        const item = contentTemplate.create(__rslv__);
        loading = false;
        contentArea.add(item);
    }

    Object {
        id: priv

        property frozenInternal: false
        property closeCallback: null
    }

    position: priv.frozenInternal ? "global" : "inline"
    
    width: documentRoot.windowWidth
    height: priv.frozenInternal ? documentRoot.windowHeight : -1
    minHeight: documentRoot.windowHeight

    marginLeft: (1 - openingPercentage) * width

    openingPercentageTransition: NumberAnimation { duration: 700; easing: "InOutQuad" }

    color: theme.primaryBackgroundColor

    enabled: ! frozen

    trapFocus: true

    style: openingPercentage < 1 ? ["sh-no-scrollbars", "sh-dropshadow"]
                                 : ["sh-no-scrollbars"]


    onOpeningPercentageChanged: () =>
    {
        if (openingPercentage === 0)
        {
            // closed
            if (priv.closeCallback)
            {
                priv.closeCallback();
                priv.closeCallback = null;
            }
        }
        else if (openingPercentage === 1)
        {
            // opened
            if (contentTemplate && loading)
            {
                loadContentTimer.start();
            }
        }
    }

    onFrozenChanged: () =>
    {
        if (frozen)
        {
            const scrollTop = documentRoot.contentY;
            documentRoot.contentY = 0;
            contentArea.minHeight = contentArea.contentHeight;
            priv.frozenInternal = true;
            page.contentY = scrollTop;
        }
        else
        {
            const scrollTop = page.contentY;
            page.contentY = 0;
            contentArea.minHeight = 0;
            contentArea.contentY = 0;
            priv.frozenInternal = false;
            documentRoot.contentY = scrollTop;
        }
    }
    
    Box {
        id: contentArea

        width: parent.width
        height: page.scrollable ? -1 : documentRoot.windowHeight
    }

    Box {
        id: headerArea
    }

    Timer {
        id: loadContentTimer

        interval: 0
        repeat: false

        onTimeout: () =>
        {
            page.loadContent();
        }
    }
}
