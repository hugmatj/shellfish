/*******************************************************************************
This file is part of the Shellfish UI toolkit.
Copyright (c) 2020 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

require "shellfish/ui";

mid.Document {

    // the Document element can be accessed from anywhere by 'documentRoot'
    property documentRoot: self

    property theme: Theme { }

    function showMessageDialog(title, icon, message, buttons)
    {
        const dlg = _messageDialogT.create(__rslv__);
        dlg.title = title;
        dlg.icon = icon;
        dlg.message = message;
        dlg.buttons = buttons;
        dlg.show();
        return dlg;
    }

    function showInfoDialog(title, message, callback)
    {
        return showMessageDialog(title, "info1", message, [
            { label: "Ok", callback: callback }
        ]);
    }

    function showWarningDialog(title, message, callback)
    {
        return showMessageDialog(title, "warning1", message, [
            { label: "Ok", callback: callback }
        ]);
    }

    function showErrorDialog(title, message, callback)
    {
        return showMessageDialog(title, "notification", message, [
            { label: "Ok", callback: callback }
        ]);
    }

    function showQuestionDialog(title, message, yesCallback, noCallback)
    {
        return showMessageDialog(title, "question", message, [
            { label: "Yes", callback: yesCallback },
            { label: "No", callback: noCallback }
        ]);
    }

    function showProgressDialog(title, message)
    {
        const dlg = _progressDialogT.create(__rslv__);
        dlg.title = title;
        dlg.message = message;
        dlg.show();
        return dlg;
    }

    property _messageDialogT: template Dialog {
        id: dialog

        property buttons: []

        property icon: ""
        property message: ""

        into buttons Repeater {
            id: buttonsRepeater

            model: ListModel { data: dialog.buttons }

            delegate: template Button {
                marginLeft: theme.paddingSmall
                icon: modelData.value.icon
                text: modelData.value.label
                onClick: () =>
                {
                    const cb = modelData.value.callback;
                    dialog.parent = null;
                    if (cb)
                    {
                        cb();
                    }
                }

                dialog.onKeyDown: (ev) =>
                {
                    if (buttonsRepeater.model.size === 1 &&
                        (ev.key === "Enter" || ev.key === "Escape"))
                    {
                        click(ev);
                    }
                    else if (modelData.index === 0 && ev.key === "Enter")
                    {
                        click(ev);
                    }
                    else if (modelData.index === 1 && ev.key === "Escape")
                    {
                        click(ev);
                    }
                }
            }
        }

        Box {
            layout: "row"

            Label {
                visible: dialog.icon !== ""
                marginRight: theme.paddingLarge
                width: theme.itemWidthSmall
                height: width
                fontSize: height
                text: visible ? "[icon:" + dialog.icon + "]" : ""
            }

            Label {
                fillWidth: true
                overflowBehavior: "wrap"
                text: dialog.message
            }
        }
    }

    property _progressDialogT: template Dialog {
        id: dialog

        property message: ""
        property progress: 0  /* between 0 and 1 */
        
        Box {
            width: 400

            Label {
                fillWidth: true
                overflowBehavior: "wrap"
                text: message
            }
            
            Box {
                marginTop: theme.paddingMedium
                marginRight: parent.bbox.width * (1.0 - dialog.progress)
                marginBottom: theme.paddingMedium
                fillWidth: true
                height: theme.paddingSmall
                color: theme.primaryColor
            }
        }

    }
}
