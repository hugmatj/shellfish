/*******************************************************************************
This file is part of the Shellfish UI toolkit.
Copyright (c) 2020 Martin Grimme <martin.grimme@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

require "shellfish/ui";

MouseBox {
    id: item

    property text: ""
    property highlighted: false
    property menu: null
    property menuOpened: false

    property menuRuler: parent.menuRuler || null

    property _menu: null

    property showMenu: () =>
    {
        if (! menu || _menu)
        {
            return;
        }

        _menu = menu.create();
        _menu.init();

        if (parent.menuOpened)
        {
            _menu.popup(self, true);
        }
        else
        {
            _menu.popup(self, false);
        }

        // unhighlight when menu clicked away
        _menu.get().onVisibleChanged = () =>
        {
            if (! _menu.visible)
            {
                highlighted = false;
            }
        };

        _menu.get().onPointerMove = (ev) =>
        {
            let onItem = false;
            parent.children().forEach((child) =>
            {
                const cBox = child.bbox;
                if (ev.x >= cBox.x && ev.x < cBox.x + cBox.width &&
                    ev.y >= cBox.y && ev.y < cBox.y + cBox.height)
                {
                    if (child !== self && child.highlighted === false)
                    {
                        child.highlighted = true;
                    }
                    onItem = true;
                }
            });

            if (! onItem && parent.pointerMove)
            {
                parent.pointerMove(ev);
            }
        }

        menuOpened = true;
    }

    property closeMenu: () =>
    {
        if (_menu)
        {
            menuOpened = false;
            _menu.discard();
            _menu = null;
        }
    }

    onDestruction: () =>
    {
        if (_menu)
        {
            closeMenu();
        }
    }

    onHighlightedChanged: () =>
    {
        if (highlighted)
        {
            // open menu if there is one, and if a sibling menu or the parent
            // menu is opened
            if (menu &&
                (parent.children().filter((c) => { return c.menuOpened; }).length > 0 ||
                 parent.menuOpened))
            {
                showMenu();
            }

            // unhighlight siblings
            parent.children().forEach((child) =>
            {
                if (child !== self && child.highlighted)
                {
                    child.highlighted = false;
                }
            });
        }
        else
        {
            // close menu if there is one
            if (menuOpened)
            {
                closeMenu();
            }
        }
    }

    onPointerEnter: (ev) =>
    {
        highlighted = true;
    }

    onClick: (ev) =>
    {
        if (menu)
        {
            if (! _menu)
            {
                showMenu();
            }
            else
            {
                closeMenu();
            }
            ev.accepted = true;
        }
    }

    canFocus: true

    width: !! menuRuler ? menuRuler.max.width + 2 * theme.paddingSmall : -1
    height: theme.itemHeightMedium
    layout: "center-row"

    color: containsMouse || menuOpened ? theme.highlightBackgroundColor
                                       : "transparent"

    Label {
        id: label
        
        ruler: item.menuRuler

        marginLeft: theme.paddingSmall
        marginRight: theme.paddingSmall
        color: item.containsMouse || item.menuOpened ? theme.highlightColor
                                                     : item.enabled ? theme.primaryColor
                                                                    : theme.disabledColor
        text: item.text
    }

    Box { fillWidth: true }

    onKeyDown: (ev) =>
    {
        if (ev.key === " ")
        {
            item.click(ev);
        }
    }

    FocusIndicator { visible: item.focus }
}
